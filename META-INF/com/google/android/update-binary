#!/sbin/sh
##########################################################################################
#
# Magisk Module Template Install Script
# by topjohnwu
#
##########################################################################################

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

TMPDIR=/dev/tmp
INSTALLER=$TMPDIR/install
MAGISKBIN=/data/adb/magisk

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

# echo before loading util_functions
ui_print() { echo "$1"; }

require_new_magisk() {
  ui_print "*******************************"
  ui_print " Please install Magisk v15.3+! "
  ui_print "*******************************"
  exit 1
}

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIP=$3

mount /data 2>/dev/null

# Utility functions must exist
[ -f $MAGISKBIN/util_functions.sh ] || require_new_magisk
# Load utility functions
. $MAGISKBIN/util_functions.sh

# We can't alter magisk image live, use alternative image if required
$BOOTMODE && IMG=/data/adb/magisk_merge.img
# Always mount under tmp
MOUNTPATH=$TMPDIR/magisk_img

# Preperation for flashable zips
get_outfd

# Mount partitions
mount_partitions

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

# Setup busybox and binaries
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# Extract files
unzip -o "$ZIP" -d $INSTALLER >&2

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"
# Load configurations
. $INSTALLER/config.sh

# Check the installed magisk version
MIN_VER=`grep_prop minMagisk $INSTALLER/module.prop`
[ ! -z $MAGISK_VER_CODE -a $MAGISK_VER_CODE -ge $MIN_VER ] || require_new_magisk
MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID

# Print mod name
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

##########################################################################################
# Functions
##########################################################################################

remove_old_aml() {
  ui_print "! Old AML Detected! Removing..."
  MODS=$(grep "^fi #.*" $(dirname $OLD_AML_VER)/post-fs-data.sh | sed "s/fi #//g")
  if $BOOTMODE; then DIR=/sbin/.core/img; else DIR=$MOUNTPATH; fi
  for MOD in ${MODS} audmodlib; do
    FILE=$DIR/$MOD/$MOD-files
    if [ -f $FILE ]; then
      while read LINE; do
        if [ -f "$LINE.bak" ]; then
          mv -f "$LINE.bak" "$LINE"
        elif [ -f "$LINE.tar" ]; then
          tar -xf "$LINE.tar" -C "${LINE%/*}"
        else
          rm -f "$LINE"
        fi
        if [ ! "$(ls -A "${LINE%/*}")" ]; then
          rm -rf ${LINE%/*}
        fi
      done < $FILE
      rm -f $FILE
    fi
    rm -rf $MOUNTPATH/$MOD /sbin/.core/img/$MOD
  done
}
cp_mv() {
  if [ -z $4 ]; then
    mkdir -p "$(dirname $3)"
    cp -f "$2" "$3"
  else
    mkdir -p "$(dirname $3)"
    cp -f "$2" "$3"
    chmod $4 "$3"
  fi
  [ "$1" == "-m" ] && rm -f $2
}
osp_detect() {
  case $1 in
    *.conf) SPACES=$(sed -n "/^output_session_processing {/,/^}/ {/^ *music {/p}" $1 | sed -r "s/( *).*/\1/")
            EFFECTS=$(sed -n "/^output_session_processing {/,/^}/ {/^$SPACES\music {/,/^$SPACES}/p}" $1 | grep -E "^$SPACES +[A-Za-z]+" | sed -r "s/( *.*) .*/\1/g")
            for EFFECT in ${EFFECTS}; do
              SPACES=$(sed -n "/^effects {/,/^}/ {/^ *$EFFECT {/p}" $1 | sed -r "s/( *).*/\1/")
              [ "$EFFECT" != "atmos" ] && sed -i "/^effects {/,/^}/ {/^$SPACES$EFFECT {/,/^$SPACES}/ s/^/#/g}" $1
            done;;
     *.xml) EFFECTS=$(sed -n "/^ *<postprocess>$/,/^ *<\/postprocess>$/ {/^ *<stream type=\"music\">$/,/^ *<\/stream>$/ {/<stream type=\"music\">/d; /<\/stream>/d; s/<apply effect=\"//g; s/\"\/>//g; p}}" $1)
            for EFFECT in ${EFFECTS}; do
              [ "$EFFECT" != "atmos" ] && sed -ri "s/^( *)<apply effect=\"$EFFECT\"\/>/\1<\!--<apply effect=\"$EFFECT\"\/>-->/" $1
            done;;
  esac
}
patch_cfgs() {
  local first=true file lib=false effect=false outsp=false proxy=false libname libpath effname uid libname_sw uid_sw libname_hw uid_hw libpathsw libpathhw conf xml
  local opt=`getopt :leopr "$@"`
  eval set -- "$opt"
  while true; do
    case "$1" in
      -l) lib=true; first=false; shift;;
      -e) effect=true; first=false; shift;;
      -o) outsp=true; conf=output_session_processing; xml=postprocess; first=false; shift;;
      -r) outsp=true; conf=pre_processing; xml=preprocess; first=false; shift;;
      -p) proxy=true; effect=false; outsp=false; first=false; shift;;
      --) shift; break;;
      *) return 1;;
    esac
  done
  file=$1; shift
  $first && { lib=true; effect=true; }
  if $proxy; then
    effname=$1; shift
    libname_sw=$1; uid_sw=${2:?}; shift 2
    $lib && { libpathsw=$1; shift; }
    libname_hw=$1; uid_hw=${2:?}; shift 2
    $lib && { libpathhw=${1:?}; shift; }
  else
    $outsp && { type=${1:?}; shift; }
    { $effect || $outsp; } && { effname=${1:?}; shift; }
    $effect && { uid=${1:?}; shift; }
    { $lib || $effect; } && { libname=${1:?}; shift; }
    $lib && { libpath=${1:?}; shift; }
  fi
  case "$file" in
  *.conf)
    if $proxy; then
      [ ! "$(sed -n "/^effects {/,/^}/ {/^  $effname {/,/^  }/ {/uuid $uid_hw/p}}" $file)" ] && sed -i "s/^effects {/effects {\n  $effname {\n    library proxy\n    uuid 9d4921da-8225-4f29-aefa-6e6f69726861\n\n    libsw {\n      library $libname_sw\n      uuid $uid_sw\n    }\n\n    libhw {\n      library $libname_hw\n      uuid $uid_hw\n    }\n  }/g" $file
      if $lib; then
        patch_cfgs -l "$file" "proxy" "$LIBDIR/libeffectproxy.so"
        patch_cfgs -l "$file" "$libname_sw" "$libpathsw"
        patch_cfgs -l "$file" "$libname_hw" "$libpathhw"
      fi
      return
    fi
    if $lib; then
      [ ! "$(sed -n "/^libraries {/,/^}/ {/^ *$libname {/,/}/p}" $file)" ] && sed -i "s|^libraries {|libraries {\n  $libname {\n    path $libpath\n  }|" $file
    fi
    if $effect; then
      [ ! "$(sed -n "/^effects {/,/^}/ {/^ *$effname {/,/}/p}" $file)" ] && sed -i "s|^effects {|effects {\n  $effname {\n    library $libname\n    uuid $uid\n  }|" $file
    fi
    if $outsp && [ "$API" -ge 26 ]; then
      if [ ! "$(sed -n "/^$conf {/,/^}/p" $file)" ]; then
        echo -e "\n$conf {\n    $type {\n        $effname {\n        }\n    }\n}" >> $file
      elif [ ! "$(sed -n "/^$conf {/,/^}/ {/$type {/,/^    }/p}" $file)" ]; then
        sed -i "/^$conf {/,/^}/ s/$conf {/$conf {\n    $type {\n        $effname {\n        }\n    }/" $file
      elif [ ! "$(sed -n "/^$conf {/,/^}/ {/$type {/,/^    }/ {/$effname {/,/}/p}}" $file)" ]; then
        sed -i "/^$conf {/,/^}/ {/$type {/,/^    }/ s/$type {/$type {\n        $effname {\n        }/}" $file
      fi
    fi;;
  *)
    if $proxy; then
      [ ! "$(sed -n "/<effects>/,/<\/effects>/ {/<effectProxy name=\"proxy\" library=\"proxy\" uuid=\"9d4921da-8225-4f29-aefa-6e6f69726861\">/,/<\/effectProxy>/ {/uuid=\"$uid_hw\"/}}" $file)" ] && sed -i -e "/<effects>/ a\        <effectProxy name=\"proxy\" library=\"proxy\" uuid=\"9d4921da-8225-4f29-aefa-6e6f69726861\">\n            <libsw library=\"$libname_sw\" uuid=\"$uid_sw\"\/>\n            <libhw library=\"$libname_hw\" uuid=\"$uid_hw\"\/>\n        <\/effectProxy>" $file
      if $lib; then
        patch_cfgs -l "$file" "proxy" "$LIBDIR/libeffectproxy.so"
        patch_cfgs -l "$file" "$libname_sw" "$libpathsw"
        patch_cfgs -l "$file" "$libname_hw" "$libpathhw"
      fi
      return
    fi
    if $lib; then
      [ ! "$(sed -n "/<libraries>/,/<\/libraries>/ {/^ *<library name=\"$libname\" path=\"$(basename $libpath)\"\/>/p}" $file)" ] && sed -i "/<libraries>/ a\        <library name=\"$libname\" path=\"$(basename $libpath)\"\/>" $file
    fi
    if $effect; then
      [ ! "$(sed -n "/<effects>/,/<\/effects>/ {/^ *<effect name=\"$effname\" library=\"$libname\" uuid=\"$uid\"\/>/p}" $file)" ] && sed -i "/<effects>/ a\        <effect name=\"$effname\" library=\"$(basename $libname)\" uuid=\"$uid\"\/>" $file
    fi
    if $outsp && [ "$API" -ge 26 ]; then
      if [ ! "$(sed -n "/^ *<$xml>/,/^ *<\/$xml>/p" $file)" ]; then
        sed -i "/<\/audio_effects_conf>/i\    <$xml>\n       <stream type=\"$type\">\n            <apply effect=\"$effname\"\/>\n        <\/stream>\n    <\/$xml>" $file
      elif [ ! "$(sed -n "/^ *<$xml>/,/^ *<\/$xml>/ {/<stream type=\"$type\">/,/<\/stream>/p}" $file)" ]; then
        sed -i "/^ *<$xml>/,/^ *<\/$xml>/ s/    <$xml>/    <$xml>\n        <stream type=\"$type\">\n            <apply effect=\"$effname\"\/>\n        <\/stream>/" $file
      elif [ ! "$(sed -n "/^ *<$xml>/,/^ *<\/$xml>/ {/<stream type=\"$type\">/,/<\/stream>/ {/^ *<apply effect=\"$effname\"\/>/p}}" $file)" ]; then
        sed -i "/^ *<$xml>/,/^ *<\/$xml>/ {/<stream type=\"$type\">/,/<\/stream>/ s/<stream type=\"$type\">/<stream type=\"$type\">\n            <apply effect=\"$effname\"\/>/}" $file
      fi
    fi;;
  esac
}
installmod() {
  ui_print "- Installing Audio Modification Library"
  # Create mod paths
  mktouch $MOUNTPATH/.core/aml/mods/modlist
  mktouch $MODPATH/system.prop

  ui_print "   Searching for supported audio mods..."
  # Escape each backslash and space since shell will expand it during echo
  sed -i -e 's/\\/\\\\/g' -e 's/\ /\\ /g' $INSTALLER/common/AudioModificationLibrary.sh
  # Separate AML into individual files for each audio mod
  mkdir -p $INSTALLER/mods
  while read LINE; do
    case $LINE in
      \#*) if [ -z $TMP ]; then
             TMP=1;
           else
             echo " " >> $INSTALLER/mods/$UUID.sh
             cp_mv -c $INSTALLER/mods/$UUID.sh $MODPATH/.scripts/$UUID.sh
             sed -i "/case \$PRINTED in/,/esac/d" $MODPATH/.scripts/$UUID.sh
           fi
           UUID=$(echo "$LINE" | sed "s/#//");;
      *) echo "$LINE" >> $INSTALLER/mods/$UUID.sh;;
    esac
  done < $INSTALLER/common/AudioModificationLibrary.sh

  # Copy original files to MODPATH
  if $BOOTMODE; then
    FILES="$(find /sbin/.core/mirror/system /sbin/.core/mirror/vendor -type f -name "*audio_effects*.conf" -o -name "*audio_effects*.xml" -o -name "*audio_*policy*.conf" -o -name "*audio_*policy*.xml" -o -name "*mixer_paths*.xml")"
    for FILE in ${FILES}; do
      NAME=$(echo "$FILE" | sed -e "s|/sbin/.core/mirror||" -e "s|/system/||")
      cp_mv -c $FILE $MODPATH/system/$NAME
    done
  else
    FILES="$(find -L /system -type f -name "*audio_effects*.conf" -o -name "*audio_effects*.xml" -o -name "*audio_*policy*.conf" -o -name "*audio_*policy*.xml" -o -name "*mixer_paths*.xml")"
    for FILE in ${FILES}; do
      NAME=$FILE
      cp_mv -c $FILE $MODPATH$NAME
    done
  fi
  # Comment out music_helper and sa3d (samsung equivalent)
  for FILE in $MODPATH/system/etc/audio_effects.conf $MODPATH/system/vendor/etc/audio_effects.conf $MODPATH/system/etc/audio_effects.xml $MODPATH/system/vendor/etc/audio_effects.xml; do
    [ -f $FILE ] && osp_detect $FILE
  done
  # Search magisk img for any audio mods and move relevant files (confs/pols/mixs/props) to non-mounting directory
  # Patch common aml files for each audio mod found
  PRINTED=""
  if $BOOTMODE; then MODS="$(find /sbin/.core/img/*/system $MOUNTPATH/*/system -maxdepth 0 -type d)"; else MODS="$(find $MOUNTPATH/*/system -maxdepth 0 -type d)"; fi
  if [ "$MODS" ]; then
    for MOD in ${MODS}; do
      [ "$MOD" == "$MODPATH/system" ] && continue
      FILES=$(find $MOD -type f -name "*audio_effects*.conf" -o -name "*audio_effects*.xml" -o -name "*audio_*policy*.conf" -o -name "*audio_*policy*.xml" -o -name "*mixer_paths*.xml")
      [ -z "$FILES" ] && continue
      MODNAME=$(basename $(dirname $MOD))
      echo "$MODNAME" >> $MOUNTPATH/.core/aml/mods/modlist
      if [ -f "$(dirname $MOD)/.aml.sh" ]; then
        ui_print "    Found $(sed -n "s/^name=//p" $(dirname $MOD)/module.prop)! Patching..."
        # Use .aml.sh script included in module
        case $(sed -n 1p $(dirname $MOD)/.aml.sh) in
          \#*~*.sh) cp_mv -c $(dirname $MOD)/.aml.sh $MODPATH/.scripts/$(sed -n 1p $(dirname $MOD)/.aml.sh | sed -r "s|#(.*)|\1|"); cp -f $(dirname $MOD)/.aml.sh $INSTALLER/mods/$(sed -n 1p $(dirname $MOD)/.aml.sh | sed -r "s|#(.*)|\1|");;
          *) cp_mv -c $(dirname $MOD)/.aml.sh $MODPATH/.scripts/$MODNAME.sh; cp -f $(dirname $MOD)/.aml.sh $INSTALLER/mods/$MODNAME.sh;;
        esac
      fi
      for FILE in ${FILES}; do
        NAME=$(echo "$FILE" | sed "s|$MOD|system|")
        case $FILE in
          *audio_effects*.conf) for AUDMOD in $(ls $INSTALLER/mods); do
                                  if [ "$AUDMOD" == "$MODNAME.sh" ]; then
                                    [ "$MODNAME" == "ainur_sauron" ] && LIBDIR="$(dirname $(find $MOD -type f -name "libbundlewrapper.so" | head -n 1) | sed -e "s|$MOD|/system|" -e "s|/system/vendor|/vendor|" -e "s|/lib64|/lib|")"
                                    (. $INSTALLER/mods/$AUDMOD) || { [ -z "$PRINTED" ] && { ui_print "   ! Error in script! Contact developer of mod!"; ui_print "   ! Remove that mod, then uninstall/reinstall aml!"; } }
                                    break
                                  else
                                    LIB=$(echo "$AUDMOD" | sed -r "s|(.*)~.*.sh|\1|")
                                    UUID=$(echo "$AUDMOD" | sed -r "s|.*~(.*).sh|\1|")
                                    if [ "$(sed -n "/^libraries {/,/^}/ {/$LIB.so/p}" $FILE)" ] && [ "$(sed -n "/^effects {/,/^}/ {/uuid $UUID/p}" $FILE)" ] && [ "$(find $MOD -type f -name "$LIB.so")" ]; then
                                      LIBDIR="$(dirname $(find $MOD -type f -name "$LIB.so" | head -n 1) | sed -e "s|$MOD|/system|" -e "s|/system/vendor|/vendor|" -e "s|/lib64|/lib|")"
                                      (. $INSTALLER/mods/$AUDMOD) || { [ -z "$PRINTED" ] && { ui_print "   ! Error in script! Contact developer of mod!"; ui_print "   ! Remove that mod, then uninstall/reinstall aml!"; } }
                                      PRINTED="${PRINTED} $UUID"
                                      break
                                    fi
                                  fi
                                done;;
          *audio_effects*.xml) for AUDMOD in $(ls $INSTALLER/mods); do
                                 if [ "$AUDMOD" == "$MODNAME.sh" ]; then
                                   [ "$MODNAME" == "ainur_sauron" ] && LIBDIR="$(dirname $(find $MOD -type f -name "libbundlewrapper.so" | head -n 1) | sed -e "s|$MOD|/system|" -e "s|/system/vendor|/vendor|" -e "s|/lib64|/lib|")"
                                   (. $INSTALLER/mods/$AUDMOD) || { [ -z "$PRINTED" ] && { ui_print "   ! Error in script! Contact developer of mod!"; ui_print "   ! Remove that mod, then uninstall/reinstall aml!"; } }
                                   break
                                 else
                                   LIB=$(echo "$AUDMOD" | sed -r "s|(.*)~.*.sh|\1|")
                                   UUID=$(echo "$AUDMOD" | sed -r "s|.*~(.*).sh|\1|")
                                   if [ "$(sed -n "/<libraries>/,/<\/libraries>/ {/path=\"$LIB.so\"/p}" $FILE)" ] && [ "$(sed -n "/<effects>/,/<\/effects>/ {/uuid=\"$UUID\"/p}" $FILE)" ] && [ "$(find $MOD -type f -name "$LIB.so")" ]; then
                                     LIBDIR="$(dirname $(find $MOD -type f -name "$LIB.so" | head -n 1) | sed -e "s|$MOD|/system|" -e "s|/system/vendor|/vendor|" -e "s|/lib64|/lib|")"
                                     (. $INSTALLER/mods/$AUDMOD) || { [ -z "$PRINTED" ] && { ui_print "   ! Error in script! Contact developer of mod!"; ui_print "   ! Remove that mod, then uninstall/reinstall aml!"; } }
                                     PRINTED="${PRINTED} $UUID"
                                     break
                                   fi
                                 fi
                               done;;
        esac
        cp_mv -m $FILE $MOUNTPATH/.core/aml/mods/$MODNAME/$NAME
      done
      # Import all props from audio mods into a common aml one
      # Check for and comment out conflicting props between the mods as well
      if [ -f $(dirname $MOD)/system.prop ]; then
        CONFPRINT=false
        sed -i "/^$/d" $(dirname $MOD)/system.prop
        [ "$(tail -1 $(dirname $MOD)/system.prop)" ] && echo "" >> $(dirname $MOD)/system.prop
        while read PROP; do
          [ ! "$PROP" ] && break
          TPROP=$(echo "$PROP" | sed -r "s/(.*)=.*/\1/")
          if [ ! "$(grep "$TPROP" $MODPATH/system.prop)" ]; then
            echo "$PROP" >> $MODPATH/system.prop
          elif [ "$(grep "^$TPROP" $MODPATH/system.prop)" ] && [ ! "$(grep "^$PROP" $MODPATH/system.prop)" ]; then
            sed -i "s|^$TPROP|^#$TPROP|" $MODPATH/system.prop
            echo "#$PROP" >> $MODPATH/system.prop
            $CONFPRINT || { ui_print " "
            ui_print "   ! Conflicting props found !"
            ui_print "   ! Conflicting props will be commented out !"
            ui_print "   ! Check the conflicting props file at /sbin/.core/img/aml/system.prop"
            ui_print " "; }
            CONFPRINT=true
          fi
        done < $(dirname $MOD)/system.prop
        cp_mv -m $(dirname $MOD)/system.prop $MOUNTPATH/.core/aml/mods/$MODNAME/system.prop
      fi
    done
  else
    ui_print "   ! No supported audio mods found !"
  fi

  # Handle replace folders
  for TARGET in $REPLACE; do
    mktouch $MODPATH$TARGET/.replace
  done

  # Auto Mount
  $AUTOMOUNT && touch $MODPATH/auto_mount

  # prop files
  [ -s $MODPATH/system.prop ] || rm -f $MODPATH/system.prop

  # Module info
  cp -af $INSTALLER/module.prop $MODPATH/module.prop
  if $BOOTMODE; then
    # Update info for Magisk Manager
    mktouch /sbin/.core/img/$MODID/update
    cp -af $INSTALLER/module.prop /sbin/.core/img/$MODID/module.prop
  fi

  # post-fs-data mode scripts
  [ $API -ge 26 ] && sed -i "s/OREONEW=false/OREONEW=true/" $INSTALLER/common/post-fs-data.sh
  $POSTFSDATA && cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh
  cp_mv -c $INSTALLER/common/aml.sh $MOUNTPATH/.core/post-fs-data.d/aml.sh 0755

  # service mode scripts
  $LATESTARTSERVICE && cp -af $INSTALLER/common/service.sh $MODPATH/service.sh

  # ADD BLANK LINE TO END OF ALL PROP/SCRIPT FILES IF NOT ALREADY PRESENT
  for FILE in $MODPATH/*.sh $MODPATH/*.prop $MOUNTPATH/.core/post-fs-data.d/aml.sh; do
    [ "$(tail -1 $FILE)" ] && echo "" >> $FILE
  done

  ui_print "- Setting permissions"
  set_permissions
}
uninstallmod() {
  ui_print "- Uninstalling Audio Modification Library"
  # Restore all relevant audio files to their respective mod directories (if the mod still exists)
  COREPATH=$MOUNTPATH/.core
  if $BOOTMODE; then
    [ -f /sbin/.core/img/.core/aml/mods/modlist ] && COREPATH=/sbin/.core/img/.core
    MODDIR=/sbin/.core/img
  else
    MODDIR=$MOUNTPATH
  fi

  [ -f $COREPATH/aml/mods/modlist ] && {
  if [ -s $COREPATH/aml/mods/modlist ]; then
    while read LINE; do
      [ -d $MODDIR/$LINE -a ! -f "$MODDIR/$LINE/update" ] && { for FILE in $(find $COREPATH/aml/mods/$LINE -type f); do
        NAME=$(echo "$FILE" | sed "s|$COREPATH/aml/mods/||")
        cp_mv -m $FILE $MODDIR/$NAME
      done; }
    done < $COREPATH/aml/mods/modlist
  fi; }
  rm -f $COREPATH/post-fs-data.d/aml.sh $MOUNTPATH/.core/post-fs-data.d/aml.sh
  rm -rf $COREPATH/aml $MOUNTPATH/.core/aml $MODPATH /sbin/.core/img/$MODID
}

##########################################################################################
# Install
##########################################################################################

# Get the variable reqSizeM. Use your own method to determine reqSizeM if needed
request_zip_size_check "$ZIP"

# This function will mount $IMG to $MOUNTPATH, and resize the image based on $reqSizeM
mount_magisk_img

# Detect if aml is already installed and set vars
if $BOOTMODE; then
  MOD_VER=/sbin/.core/img/$MODID/module.prop
  OLD_AML_VER="/sbin/.core/img/audmodlib/module.prop"
else
  MOD_VER=$MODPATH/module.prop
  OLD_AML_VER="$MOUNTPATH/audmodlib/module.prop"
fi

# Remove old aml & mods
[ -f "$OLD_AML_VER" ] && remove_old_aml

# Detect aml version and act accordingly
if [ -f "$MOD_VER" ]; then
  if [ $(grep_prop versionCode $MOD_VER) -ge $(grep_prop versionCode $INSTALLER/module.prop) ]; then
    ui_print "- Current or newer version detected. Uninstalling!"
    uninstallmod
  else
    ui_print "- Older version detected. Upgrading!"
    uninstallmod
    installmod
  fi
else
  installmod
fi

##########################################################################################
# Finalizing
##########################################################################################

# Unmount magisk image and shrink if possible
unmount_magisk_img

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

exit 0
