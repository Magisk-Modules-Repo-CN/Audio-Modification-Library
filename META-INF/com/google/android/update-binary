#!/sbin/sh
##########################################################################################
#
# Magisk Module Template Install Script
# by topjohnwu
#
##########################################################################################

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

TMPDIR=/dev/tmp
INSTALLER=$TMPDIR/install
MAGISKBIN=/data/adb/magisk

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

# echo before loading util_functions
ui_print() { echo "$1"; }

require_new_magisk() {
  ui_print "*******************************"
  ui_print " Please install Magisk v15.3+! "
  ui_print "*******************************"
  exit 1
}

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIP=$3

mount /data 2>/dev/null

# Utility functions must exist
[ -f $MAGISKBIN/util_functions.sh ] || require_new_magisk
# Load utility functions
. $MAGISKBIN/util_functions.sh

# We can't alter magisk image live, use alternative image if required
$BOOTMODE && IMG=/data/adb/magisk_merge.img
# Always mount under tmp
MOUNTPATH=$TMPDIR/magisk_img

# Preperation for flashable zips
get_outfd

##########################################################################################
# Preparation
##########################################################################################

# Extract files
unzip -o "$ZIP" -d $INSTALLER >&2

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"
# Load configurations
. $INSTALLER/config.sh

# Check the installed magisk version
MIN_VER=`grep_prop minMagisk $INSTALLER/module.prop`
[ ! -z $MAGISK_VER_CODE -a $MAGISK_VER_CODE -ge $MIN_VER ] || require_new_magisk
MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID

# Print mod name
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

# Mount partitions
mount_partitions

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods
if [ $API -ge 26 ]; then OREONEW=true; else OREONEW=false; fi
sed -i "s/<OREONEW>/$OREONEW/" $INSTALLER/common/post-fs-data.sh

# Setup busybox and binaries
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Functions
##########################################################################################

remove_old_aml() {
  ui_print "! Old AML Detected! Removing..."
  MODS=$(grep "^fi #.*" $(dirname $OLD_AML_VER)/post-fs-data.sh | sed "s/fi #//g")
  if $BOOTMODE; then DIR=/sbin/.core/img; else DIR=$MOUNTPATH; fi
  for MOD in ${MODS} audmodlib; do
    FILE=$DIR/$MOD/$MOD-files
    if [ -f $FILE ]; then
      while read LINE; do
        if [ -f "$LINE.bak" ]; then
          mv -f "$LINE.bak" "$LINE"
        elif [ -f "$LINE.tar" ]; then
          tar -xf "$LINE.tar" -C "${LINE%/*}"
        else
          rm -f "$LINE"
        fi
        if [ ! "$(ls -A "${LINE%/*}")" ]; then
          rm -rf ${LINE%/*}
        fi      
      done < $FILE
      rm -f $FILE
    fi
    rm -rf $MOUNTPATH/$MOD /sbin/.core/img/$MOD
  done
}
cp_mv() {
  if [ -z $4 ]; then install -D "$2" "$3"; else install -D -m "$4" "$2" "$3"; fi
  [ "$1" == "-m" ] && rm -f $2
}
patch_cfgs() {
  case $1 in
    *.conf) if [ "$2" == "libraryonly" ]; then
              [ ! "$(sed -n "/^libraries {/,/^}/ {/^ *$3 {/,/}/p}" $1)" ] && sed -i "s|^libraries {|libraries {\n  $3 {\n    path $4\n  }|" $1
            elif [ "$2" == "effectonly" ]; then
              [ ! "$(sed -n "/^effects {/,/^}/ {/^ *$4 {/,/}/p}" $1)" ] && sed -i "s|^effects {|effects {\n  $4 {\n    library $3\n    uuid $5\n  }|" $1
            elif [ "$2" == "outsp" ]; then
              if $OREONEW; then
                if [ ! "$(sed -n "/^output_session_processing {/,/^}/p" $1)" ]; then
                  echo -e "output_session_processing {\n    music {\n        $3 {\n        }\n    }\n}" >> $1
                elif [ ! "$(sed -n "/^output_session_processing {/,/^}/ {/music {/,/^    }/p}" $1)" ]; then
                  sed -i "/output_session_processing {/,/^}/ s/output_session_processing {/output_session_processing {\n    music {\n        $3 {\n        }\n    }/" $1
                elif [ ! "$(sed -n "/^output_session_processing {/,/^}/ {/music {/,/^    }/ {/$3 {/,/}/p}}" $1)" ]; then
                  sed -i "/output_session_processing {/,/^}/ {/music {/,/^    }/ s/music {/music {\n        $3 {\n        }/}" $1
                fi
              fi
            else
              [ ! "$(sed -n "/^libraries {/,/^}/ {/^ *$2 {/,/}/p}" $1)" ] && sed -i "s|^libraries {|libraries {\n  $2 {\n    path $4\n  }|" $1
              [ ! "$(sed -n "/^effects {/,/^}/ {/^ *$3 {/,/}/p}" $1)" ] && sed -i "s|^effects {|effects {\n  $3 {\n    library $2\n    uuid $5\n  }|" $1
            fi;;
    *) if [ "$2" == "libraryonly" ]; then
         [ ! "$(sed -n "/<libraries>/,/<\/libraries>/ {/^ *<library name=\"$3\" path=\"$(basename $4)\"\/>/p}" $1)" ] && sed -i "/<libraries>/ a\        <library name=\"$3\" path=\"$(basename $4)\"\/>" $1
       elif [ "$2" == "effectonly" ]; then
         [ ! "$(sed -n "/<effects>/,/<\/effects>/ {/^ *<effect name=\"$4\" library=\"$3\" uuid=\"$5\"\/>/p}" $1)" ] && sed -i "/<effects>/ a\        <effect name=\"$4\" library=\"$(basename $3)\" uuid=\"$5\"\/>" $1
       elif [ "$2" == "outsp" ]; then
         if $OREONEW; then
           if [ ! "$(sed -n "/<postprocess>/,/<\/postprocess>/p" $1)" ]; then     
             sed -i "/<\/audio_effects_conf>/i\    <postprocess>\n       <stream type=\"music\">\n            <apply effect=\"$3\"\/>\n        <\/stream>\n    <\/postprocess>" $1
           elif [ ! "$(sed -n "/<postprocess>/,/<\/postprocess>/ {/<stream type=\"music\">/,/<\/stream>/p}" $1)" ]; then     
             sed -i "/<postprocess>/,/<\/postprocess>/ s/    <postprocess>/    <postprocess>\n        <stream type=\"music\">\n            <apply effect=\"$3\"\/>\n        <\/stream>/" $1
           elif [ ! "$(sed -n "/<postprocess>/,/<\/postprocess>/ {/<stream type=\"music\">/,/<\/stream>/ {/^ *<apply effect=\"$3\"\/>/p}}" $1)" ]; then
             sed -i "/<postprocess>/,/<\/postprocess>/ {/<stream type=\"music\">/,/<\/stream>/ s/<stream type=\"music\">/<stream type=\"music\">\n            <apply effect=\"$3\"\/>/}" $1
           fi
         fi
       else
         [ ! "$(sed -n "/<libraries>/,/<\/libraries>/ {/^ *<library name=\"$2\" path=\"$(basename $4)\"\/>/p}" $1)" ] && sed -i "/<libraries>/ a\        <library name=\"$2\" path=\"$(basename $4)\"\/>" $1
         [ ! "$(sed -n "/<effects>/,/<\/effects>/ {/^ *<effect name=\"$3\" library=\"$2\" uuid=\"$5\"\/>/p}" $1)" ] && sed -i "/<effects>/ a\        <effect name=\"$3\" library=\"$(basename $2)\" uuid=\"$5\"\/>" $1
       fi;;
  esac
}
installmod() {
  ui_print "- Installing Audio Modification Library"  
  # Create mod paths
  mktouch $MOUNTPATH/.core/aml/mods/modlist
  mktouch $MODPATH/system.prop

  ui_print "   Searching for supported audio mods..."
  # Escape each backslash and space since shell will expand it during echo
  sed -i -e 's/\\/\\\\/g' -e 's/\ /\\ /g' $INSTALLER/common/AudioModificationLibrary.sh
  # Separate AML into individual files for each audio mod
  mkdir -p $INSTALLER/mods
  while read LINE; do
    case $LINE in
      \#*) if [ -z $TMP ]; then 
             TMP=1; 
           else
             echo " " >> $INSTALLER/mods/$UUID.sh
             cp_mv -c $INSTALLER/mods/$UUID.sh $MODPATH/.scripts/$UUID.sh
             sed -i "/case \$PRINTED in/,/esac/d" $MODPATH/.scripts/$UUID.sh
           fi
           UUID=$(echo "$LINE" | sed "s/#//");;
      *) echo "$LINE" >> $INSTALLER/mods/$UUID.sh;;
    esac
  done < $INSTALLER/common/AudioModificationLibrary.sh
  
  # Copy original files to MODPATH
  # Workaround for magisk mirror bug where mirror/system/vendor is symlinked to mounted /vendor instead of mirror/vendor on devices with a separate vendor partition
  if $BOOTMODE && [ -L /system/vendor ]; then 
    FILES="$(find $ORIGDIR/system $ORIGDIR/vendor -type f -name "*audio_effects*.conf" -o -name "*audio_effects*.xml" -o -name "*audio_policy*.conf" -o -name "*audio_policy*.xml" -o -name "*mixer_paths*.xml")"
    for FILE in ${FILES}; do
      if $BOOTMODE; then NAME=$(echo "$FILE" | sed -e "s|$ORIGDIR||" -e "s|/system/||"); else NAME=$(echo "$FILE" | sed "s|/system/||"); fi
      cp_mv -c $FILE $MODPATH/system/$NAME
    done
  else
    # Original logic
    FILES="$(find -L $ORIGDIR/system -type f -name "*audio_effects*.conf" -o -name "*audio_effects*.xml" -o -name "*audio_policy*.conf" -o -name "*audio_policy*.xml" -o -name "*mixer_paths*.xml")"
    for FILE in ${FILES}; do
      if $BOOTMODE; then NAME=$(echo "$FILE" | sed "s|$ORIGDIR||"); else NAME=$FILE; fi
      cp_mv -c $FILE $MODPATH$NAME
    done
  fi
  # Comment out music_helper and sa3d (samsung equivalent)
  for FILE in $MODPATH/system/etc/audio_effects.conf $MODPATH/system/vendor/etc/audio_effects.conf; do
    if [ -f $FILE ]; then
      [ ! "$(grep '^ *# *music_helper {' $FILE)" -a "$(grep '^ *music_helper {' $FILE)" ] && sed -i "/effects {/,/^}/ {/music_helper {/,/}/ s/^/#/g}" $FILE
      [ ! "$(grep '^ *# *sa3d {' $FILE)" -a "$(grep '^ *sa3d {' $FILE)" ] && sed -i "/effects {/,/^}/ {/sa3d {/,/^  }/ s/^/#/g}" $FILE
    fi
  done
  for FILE in $MODPATH/system/etc/audio_effects.xml $MODPATH/system/vendor/etc/audio_effects.xml; do
    if [ -f $FILE ]; then
      [ ! "$(grep '^ *<\!--<effect name=\"music_helper\"*' $FILE)" -a "$(grep '^ *<effect name=\"music_helper\"*' $FILE)" ] && sed -i "s/^\( *\)<effect name=\"music_helper\"\(.*\)/\1<\!--<effect name=\"music_helper\"\2-->/" $FILE
      [ ! "$(grep '^ *<\!--<effect name=\"sa3d\"*' $FILE)" -a "$(grep '^ *<effect name=\"sa3d\"*' $FILE)" ] && sed -i "s/^\( *\)<effect name=\"sa3d\"\(.*\)/\1<\!--<effect name=\"sa3d\"\2-->/" $FILE
    fi
  done
  # Search magisk img for any audio mods and move relevant files (confs/pols/mixs/props) to non-mounting directory
  # Patch common aml files for each audio mod found
  PRINTED=""
  if $BOOTMODE; then MODS="$(find /sbin/.core/img/*/system $MOUNTPATH/*/system -maxdepth 0 -type d)"; else MODS="$(find $MOUNTPATH/*/system -maxdepth 0 -type d)"; fi
  if [ "$MODS" ]; then
    for MOD in ${MODS}; do
      [ "$MOD" == "$MODPATH/system" ] && continue
      FILES=$(find $MOD -type f -name "*audio_effects*.conf" -o -name "*audio_effects*.xml" -o -name "*audio_policy*.conf" -o -name "*audio_policy*.xml" -o -name "*mixer_paths*.xml")
      [ -z "$FILES" ] && continue
      MODNAME=$(basename $(dirname $MOD))
      echo "$MODNAME" >> $MOUNTPATH/.core/aml/mods/modlist
      # Ainur sauron needs some custom logic due to its dynamic patching (not all installs are the same)
      if [ "$MODNAME" == "ainur_sauron" ]; then
        # Use aml script included with sauron
        cp_mv -c $(dirname $MOD)/.aml.sh $MODPATH/.scripts/ainur_sauron.sh
        LIBDIR="$(dirname $(find $MOD -type f -name "lib*.so" | head -n 1) | sed -e "s|$MOD|/system|" -e "s|/system/vendor|/vendor|")"
        ui_print "    Found Ainur Sauron! Patching..."
        . $MODPATH/.scripts/ainur_sauron.sh
        for FILE in ${FILES}; do
          cp_mv -m $FILE $MOUNTPATH/.core/aml/mods/$MODNAME/$(echo "$FILE" | sed "s|$MOD|system|")
        done
      # Universal deep_buffer remover doesn't install anything new so only detection for it is the modname - ahrion's ubdr
      elif [ "$MODNAME" == "Udb_Remover" ]; then
        for FILE in ${FILES}; do
          cp_mv -m $FILE $MOUNTPATH/.core/aml/mods/$MODNAME/$(echo "$FILE" | sed "s|$MOD|system|")
        done
        . $INSTALLER/mods/$MODNAME.sh
        PRINTED="${PRINTED} Udb_Remover"
      # All other audio mods are accounted for here
      else
        for FILE in ${FILES}; do
          NAME=$(echo "$FILE" | sed "s|$MOD|system|")
          case $FILE in
            *audio_effects*.conf) for AUDMOD in $(ls $INSTALLER/mods); do
                               [ "$AUDMOD" == "ainur_sauron" -o "$AUDMOD" == "Udb_Remover" ] && continue
                               LIB=$(echo "$AUDMOD" | sed -r "s|(.*)~.*.sh|\1|")
                               UUID=$(echo "$AUDMOD" | sed -r "s|.*~(.*).sh|\1|")
                               if [ "$(sed -n "/^libraries {/,/^}/ {/$LIB.so/p}" $FILE)" ] && [ "$(sed -n "/^effects {/,/^}/ {/uuid $UUID/p}" $FILE)" ] && [ "$(find $MOD -type f -name "$LIB.so")" ]; then
                                 LIBDIR="$(dirname $(find $MOD -type f -name "$LIB.so" | head -n 1) | sed -e "s|$MOD|/system|" -e "s|/system/vendor|/vendor|" -e "s|/lib64/|/lib/|")"
                                 . $INSTALLER/mods/$AUDMOD
                                 PRINTED="${PRINTED} $UUID"
                               fi
                             done;;
            *audio_effects*.xml) for AUDMOD in $(ls $INSTALLER/mods); do
                               echo "$AUDMOD"
                               [ "$AUDMOD" == "ainur_sauron" -o "$AUDMOD" == "Udb_Remover" ] && continue
                               LIB=$(echo "$AUDMOD" | sed -r "s|(.*)~.*.sh|\1|")
                               UUID=$(echo "$AUDMOD" | sed -r "s|.*~(.*).sh|\1|")                               
                               if [ "$(sed -n "/<libraries>/,/<\/libraries>/ {/path=\"$LIB.so\"/p}" $FILE)" ] && [ "$(sed -n "/<effects>/,/<\/effects>/ {/uuid=\"$UUID\"/p}" $FILE)" ] && [ "$(find $MOD -type f -name "$LIB.so")" ]; then
                                 LIBDIR="$(dirname $(find $MOD -type f -name "$LIB.so" | head -n 1) | sed -e "s|$MOD|/system|" -e "s|/system/vendor|/vendor|" -e "s|/lib64/|/lib/|")"
                                 . $INSTALLER/mods/$AUDMOD
                                 PRINTED="${PRINTED} $UUID"
                               fi
                             done;;
          esac
          cp_mv -m $FILE $MOUNTPATH/.core/aml/mods/$MODNAME/$NAME
        done
      fi
      # Import all props from audio mods into a common aml one
      # Check for and comment out conflicting props between the mods as well
      if [ -f $(dirname $MOD)/system.prop ]; then
        CONFPRINT=false
        while read PROP; do
          [ ! "$PROP" ] && break
          TPROP=$(echo "$PROP" | sed -r "s/(.*)=.*/\1/")
          if [ ! "$(grep "$TPROP" $MODPATH/system.prop)" ]; then
            echo "$PROP" >> $MODPATH/system.prop
          elif [ "$(grep "^$TPROP" $MODPATH/system.prop)" ] && [ ! "$(grep "^$PROP" $MODPATH/system.prop)" ]; then
            sed -i "s|^$TPROP|^#$TPROP|" $MODPATH/system.prop
            echo "#$PROP" >> $MODPATH/system.prop
            $CONFPRINT || { ui_print " "
            ui_print "   ! Conflicting props found !"
            ui_print "   ! Conflicting props will be commented out !"
            ui_print "   ! Check the conflicting props file at /magisk/aml/system.prop"
            ui_print " "; }
            CONFPRINT=true
          fi
        done < $(dirname $MOD)/system.prop
        cp_mv -m $(dirname $MOD)/system.prop $MOUNTPATH/.core/aml/mods/$MODNAME/system.prop
      fi
    done
  else
    ui_print "   ! No supported audio mods found !"
  fi

  # Handle replace folders
  for TARGET in $REPLACE; do
    mktouch $MODPATH$TARGET/.replace
  done

  # Auto Mount
  $AUTOMOUNT && touch $MODPATH/auto_mount

  # prop files
  [ -s $MODPATH/system.prop ] || rm -f $MODPATH/system.prop
  
  # Module info
  cp -af $INSTALLER/module.prop $MODPATH/module.prop
  if $BOOTMODE; then
    # Update info for Magisk Manager
    mktouch /sbin/.core/img/$MODID/update
    cp -af $INSTALLER/module.prop /sbin/.core/img/$MODID/module.prop
  fi

  # post-fs-data mode scripts
  $POSTFSDATA && cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh
  cp_mv -c $INSTALLER/common/aml.sh $MOUNTPATH/.core/post-fs-data.d/aml.sh 0755

  # service mode scripts
  $LATESTARTSERVICE && cp -af $INSTALLER/common/service.sh $MODPATH/service.sh

  ui_print "- Setting permissions"
  set_permissions
}
uninstallmod() {
  ui_print "- Uninstalling Audio Modification Library"
  # Restore all relevant audio files to their respective mod directories (if the mod still exists)
  COREPATH=$MOUNTPATH/.core
  if $BOOTMODE; then
    [ -f /sbin/.core/img/.core/aml/mods/modlist ] && COREPATH=/sbin/.core/img/.core
    MODDIR=/sbin/.core/img
  else
    MODDIR=$MOUNTPATH
  fi
  
  [ -f $COREPATH/aml/mods/modlist ] && {
  if [ -s $COREPATH/aml/mods/modlist ]; then
    while read LINE; do
      [ -d $MODDIR/$LINE -a ! -f "$MODDIR/$LINE/update" ] && { for FILE in $(find $COREPATH/aml/mods/$LINE -type f); do
        NAME=$(echo "$FILE" | sed "s|$COREPATH/aml/mods/||")
        cp_mv -m $FILE $MODDIR/$NAME
      done; }
    done < $COREPATH/aml/mods/modlist
  fi; }
  rm -f $COREPATH/post-fs-data.d/aml.sh $MOUNTPATH/.core/post-fs-data.d/aml.sh
  rm -rf $COREPATH/aml $MOUNTPATH/.core/aml $MODPATH /sbin/.core/img/$MODID
}

##########################################################################################
# Install
##########################################################################################

# Get the variable reqSizeM. Use your own method to determine reqSizeM if needed                                                                               
request_zip_size_check "$ZIP"

# This function will mount $IMG to $MOUNTPATH, and resize the image based on $reqSizeM
mount_magisk_img

# Detect if aml is already installed and set vars
if $BOOTMODE; then
  ORIGDIR=/sbin/.core/mirror
  MOD_VER=/sbin/.core/img/$MODID/module.prop
  OLD_AML_VER="/sbin/.core/img/audmodlib/module.prop"
else
  ORIGDIR=""
  MOD_VER=$MODPATH/module.prop
  OLD_AML_VER="$MOUNTPATH/audmodlib/module.prop"
fi

# Remove old aml & mods
[ -f "$OLD_AML_VER" ] && remove_old_aml

# Detect aml version and act accordingly
if [ -f "$MOD_VER" ]; then
  if [ $(grep_prop versionCode $MOD_VER) -ge $(grep_prop versionCode $INSTALLER/module.prop) ]; then
    ui_print "- Current or newer version detected. Uninstalling!"
    uninstallmod
  else
    ui_print "- Older version detected. Upgrading!"
    uninstallmod
    installmod
  fi
else
  installmod
fi

##########################################################################################
# Finalizing
##########################################################################################

# Unmount magisk image and shrink if possible
unmount_magisk_img

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

exit 0
