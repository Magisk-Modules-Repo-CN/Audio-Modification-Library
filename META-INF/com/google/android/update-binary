#!/sbin/sh
##########################################################################################
#
# Magisk Module Template Install Script
# by topjohnwu
#
##########################################################################################

TMPDIR=/dev/tmp
INSTALLER=$TMPDIR/install
# Always mount under tmp
MOUNTPATH=$TMPDIR/magisk_img

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

# echo before loading util_functions
ui_print() { echo "$1"; }

require_new_magisk() {
  ui_print "*******************************"
  ui_print " Please install Magisk v15.3+! "
  ui_print "*******************************"
  exit 1
}

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIP=$3

mount /data 2>/dev/null

# Load utility functions and keep backwards compatibility
if [ -f /data/adb/magisk/util_functions.sh ]; then
  NVBASE=/data/adb
  . /data/adb/magisk/util_functions.sh
elif [ -f /data/magisk/util_functions.sh ]; then
  NVBASE=/data
  . /data/magisk/util_functions.sh
else
  require_new_magisk
fi
[ -z $MAGISK_VER_CODE ] && require_new_magisk

# Extract files
unzip -o "$ZIP" -d $INSTALLER >&2
[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"

# Set paths
if [ $MAGISK_VER_CODE -ge 18000 ]; then
  COREPATH=$NVBASE
  for FILE in "post-fs-data.sh" "aml.sh"; do
    sed -i -e "s|COREPATH=.*|COREPATH=$COREPATH|" -e "s|MAGISKTMP=.*|MAGISKTMP=/sbin/.magisk|" $INSTALLER/common/$FILE
  done
else
  COREPATH=$MOUNTPATH/.core
  MAGISKTMP=/sbin/.core
  if [ $MAGISK_VER_CODE -lt 17000 ]; then
    # This stuff isn't in util_functions in older magisk versions
    ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
    $BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true
    MAGISKBIN=/data/adb/magisk
  fi
fi

# Use alternative image if in BOOTMODE
$BOOTMODE && IMG=$NVBASE/magisk_merge.img

# Preperation for flashable zips
get_outfd

# Mount partitions
mount_partitions

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

# Setup busybox and binaries
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# Load configurations
. $INSTALLER/config.sh

# Check the installed magisk version
MIN_VER=`grep_prop minMagisk $INSTALLER/module.prop`
[ ! -z $MAGISK_VER_CODE -a $MAGISK_VER_CODE -ge $MIN_VER ] || require_new_magisk
MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID

# Print mod name
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

##########################################################################################
# Install
##########################################################################################

# Get the variable reqSizeM. Use your own method to determine reqSizeM if needed
request_zip_size_check "$ZIP"

# This function will mount $IMG to $MOUNTPATH, and resize the image based on $reqSizeM
mount_magisk_img

# Detect aml version and act accordingly
if $BOOTMODE; then 
  MOD_VER=$MAGISKTMP/img/$MODID/module.prop
else
  MOD_VER=$MODPATH/module.prop
fi
if [ -f "$MOD_VER" ]; then
  if [ $(grep_prop versionCode $MOD_VER) -ge $(grep_prop versionCode $INSTALLER/module.prop) ]; then
    ui_print "- Current or newer version detected. Uninstalling!"
    uninstallmod
  else
    ui_print "- Older version detected. Upgrading!"
    uninstallmod
    installmod
  fi
else
  installmod
fi

##########################################################################################
# Finalizing
##########################################################################################

# Unmount magisk image and shrink if possible
unmount_magisk_img

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

exit 0
